version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REGION=eu-north-1
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/hello-k8s
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t hello-k8s .
      - docker tag hello-k8s:latest $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo Deploying to Amazon EKS...
    # Assume the mapped role so kubectl has the right AWS identity
      - CREDENTIALS=$(aws sts assume-role --role-arn "$EKS_KUBECTL_ROLE_ARN" --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
    # Now we can talk to the cluster and have RBAC via aws-auth mapping
      - aws eks update-kubeconfig --region $REGION --name k3s-lab
      - kubectl apply -f hello-k8s.yml
      - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $REPOSITORY_URI:latest > imagedefinitions.json


artifacts:
  files: imagedefinitions.json
